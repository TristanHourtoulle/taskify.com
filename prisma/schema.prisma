datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]
  projects Project[]
  teams    Team[]
  roles    Role[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Role {
  id   String @id @default(cuid())
  name String

  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  userid String
  user   User   @relation(fields: [userid], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id          String  @id @default(cuid())
  name        String
  description String?
  slug        String? @unique

  users   User[]
  Project Project[]
  roles   Role[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id    String  @id @default(cuid())
  title String
  slug  String? @unique

  projectId String
  Project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id        String   @id @default(cuid())
  name      String
  slug      String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Team      Team?    @relation(fields: [teamId], references: [id])
  teamId    String?
  Task      Task[]
}
